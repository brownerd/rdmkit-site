extends layout/layout.pug

//- .hero
//-   div(class="hero__heading") RDMKIT

block content
  main(class="main__column")
    hgroup
      h2(class="main__heading") MORE
      h3(class="main__subhead") than you care to know, maybe...

    p I have A LOT more to say about setting type online. I've been at this for a long effing time, so here are the rules that I have chosen to break and the practices that I find easiest to use.

    hgroup
      h2(class="main__heading") REMs
      h3(class="main__subhead") I love the rem and I hate em

    p A <code class="language-css">rem</code> is a "root em." It is a "relative" measurement used in CSS. It is a measurement that is "relative" to the "font-size" you assign to the "root element." The root element is the document root. And the document root is the <code class="language-css">html</code> tag. In css you can select the document root using the <code class="language-css">html {}</code> selector or the <code class="language-css">:root {}</code> pseudo selector. Both select the same thing, however <code class="language-css">:root</code> has a higher specificity. So, using it beats out styles set on the <code class="language-css">html</code> selector according to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:root">MDN Web Docs</a>.

    p Geez. There's always so much to unwind in web development. So, by making this setting <code class="language-css">:root { font-size: 20px; }</code>, I have created a "base" font-size that I can use through out the rest of the web page. I can refer to this base font-size by using the <code class="language-css">rem</code> unit. <code class="language-css">1rem</code> is equal to <code class="language-css">20px</code> now. 1.5rem = 1.5 * 20px = 30px. This allows me to have a single source of truth for relative sizing anything it need to style.

    p I hate using the <code class="language-css">em</code> unit becasue they quickly get out of hand. An <code class="language-css">em</code> is relative to a parent element's <code class="language-css">font-size</code> setting. This is confusing already. My point is that <code class="language-css">em</code> units are easy to break. If I set the <code class="language-css">:root</code> to <code class="language-css">20px</code> and then set my paragraphs to be <code class="language-css">1em</code>, then I have a paragraph set at <code class="language-css">20px</code>. But let's say that a dev later sets <code class="language-css">font-size: 16px;</code> on the <code class="language-css">article</code> tag holding that paragraph. Now, that paragraph is going to change from <code class="language-css">20px</code> to <code class="language-css">16px</code> because and <code class="language-css">em</code> is relative to the <code class="language-css">font-size</code> set on the nearest parent. I don't like this. It means that any introduction of a <code class="language-css">font-size</code> setting can break the intended font sizes of all the elements nested in that parent.

    p I also hate seeing stylesheets where I find stuff like <code class="language-css">font-size: 1.1304569685em</code>. This is effing crazy. No one wants to touch that. We need to do all we can to simplify our css. Using insane measurements isn't helping others to work with our styles confidently.

    hgroup
      h2(class="main__heading") This isn't print
      h3(class="main__subhead") let it go!

    p There are many old typographical practices that don't have any place online. 
    
    h3(class="main__subbold") Indentation
    
    p For example, indenting paragraphs does not need to be done online. In print, the ink and paper has a price. It print, you must do all you can to save on printing costs. Could you imagine how much more paper a book would need if you used full line breaks like we do on the web? And then imagine the publishing cost to print all of those books. A little indnet is all we need in print to show the beginning a paragraph and to save a crap ton of paper and money. However, online, we have infinite vertical scrolling space. We can afford to make full line breaks with no down sides. 

    p I'm sure at what point that we diverged from using indentation to style paragraphs, but that practice is dead online. So, I just think it looks weird when I see paragraph indentation online. It's purpose is irrelevant online.

    h3(class="main__subbold") Quotation marks

    p Given that nobody knows or cares about smart vs dumb quotes, I could care less about which one gets used online. This is like a potAto/potato kind of thing. I'm not a fan of fighting for stylistic practices that people don't notice, nor care about. Your belt doesn't have to match your shoes and you CAN wear white after whatever the effing date is that haters say that you can't. 

    h3(class="main__subbold") Baseline / vertical rhythm

    p This isn't important either. I know I made some tools to help make this easier. However, it is not necessary. I'd argure that a baseline grid is necessary in print where you need to have the text on opposing pages line up. We don't have this constraint online. Following a strict baseline rhythm online isn't going to save the world or make it 10x times more legible for users. Personally, I just wish that browsers made it super easy to follow a strict baseline grid. But they didn't, so I tried my hand at this.

    h3(class="main__subbold") Margins

    p In print we need margins for protecting the text and writing notes. You don't want your fingers to rub the ink off the page. You don't want damaged edges of pages to also destroy the text. You don't want the text running all the way into the binding of the book where it would be hard to see. In print, you also need margins for utility. Margins also provide room for additional info or notes. 

    p Online, we only need margins for making decent measures and keeping the text off the edges of the brower window. But, you don't have to use margins online. Yes, I think it's makes your text and site look a bit turdy, but this is the internet. If the answer is in that turd of a site, the visit was worth it. Bad typesetting is not going to keep me from finding what I need.

    h3(class="main__subbold") List positioning

    p Should lists be nested? We are so used to seeing nested lists, that it's weird to see lists that are flush with the main content. I think nesting lists is totally fine online. I don't like to nest my lists, but I'm not going to pitch a fit if my clienst want nested lists. It's not even worth the argument or explanation. 

    h3(class="main__subbold") Visual type scale

    p I do not thing that there needs to be a mathmatic or musical science to the setting of font sizes. To me the internet is like water, it always chooses the path of least resistance. We are free to have fancy font scales, but most aren't going to bother. Again, I don't fine fancily scaled fonts to look any better that simply scaled fonts. 

    h3(class="main__subbold") Fonts or typefaces?

    p Soccer or fotbal? Soda or pop? URI or URL? Who cares. Amongst type nerds say typeface. Amongst everyone else keep saying font.


    hgroup
      h2(class="main__heading") VRT isn't a true baseline
      h3(class="main__subhead") and I'm cool with that

    p In print software, your text sits perfectly on top of the baselines. On the web, it doesn't work that way because we have "boxes" that hold our text. And web text is just about centered within that box so there is room for the ascenders and descenders of the letters. Thus, online we only care that our text is centered within each baseline grid row.

    hgroup
      h2(class="main__heading") The goal 
      h3(class="main__subhead") is to keep paragraphs consistently spaced
    
    p We don't need ALL elements to fall perfectly in the middle of their baselines, we just need to make sure that the margin/padding we add keeps the core text of the page centered in each vertial grid line.

    hgroup
      h2(class="main__heading") The most important setting
      h3(class="main__subhead") to keep this all simple

    p Just set a <code class="language-css">font-size</code> and <code class="language-css">line-heigh</code> on the <code class="language-css">:root</code> selector.

    pre.language-css
      code.
        :root {
          font-size: 20px;
          line-height: 1.5;
        }

    p This is all we need to set up a uniform baseline thoughout the page. Next, we need to kill all the browser styles that crap on your efforts to follow a baseline rhythm. Here's all we need to handle everything aside from media.

    pre.language-css
      code.
        :root {
          box-sizing: border-box;
          font-size: baseFontSize;
          line-height: 1.5;
        }
        * {
          margin: 0;
          padding: 0;
          font-size: 1rem;
          font-weight: normal;
          border: none;
        }
        *,
        *:before,
        *:after {
          box-sizing: inherit;
        }
        td,
        th {
          outline: 2px solid #000;
          outline-offset: -1px;
          padding: 0 0.75rem;
        }
        sup {
          display: inline-block;
          transform: translateY(-5px);
          vertical-align: baseline;
        }
        sub {
          display: inline-block;
          transform: translateY(5px);
          vertical-align: baseline;
        }

    p This should take care of just about everything. You can see this in action on this <a href="test.pug">test</a> page. Here I've used <a href="https://github.com/cbracco/html5-test-page">HTML 5 test page</a> to find the override settings to handle all html element baseline settings. Surprisingly, there wasn't much that had to be done. But, we will need a programatic way resize images and other media. For that we can use <a href="rdm.pug">RDM</a>.

    hgroup
      h2(class="main__heading") Watch out for fractions
      h3(class="main__subhead") They are not handled consistently

    p I haven't tested this in a while, but different browsers handle the rounding of factional pixel values differently. Some might round off 23.234948 * 13.232343 before or after the multiplaication takes place. And they might round to different places as well. 23.334948 could get rounded to 23, 23.3 or 23.5. Sounds weird, but it all comes down to how a pixel can be divided like into halves or thrids. But I'm pretty sure 23.334948 can't be represented at this percision. This was the case a few years ago. Let me know if you have new info on this. 

    p I also prefer to use even numbers for base font sizes and 1.5 for line-height. This keeps all the math to whole numbers or perfect halves which seems to yield consistent results. Otherwise, rounding issues kill all of your efforts to maintain vertical rhythm.

    hgroup
      h2(class="main__heading") This is just another site
      h3(class="main__subhead") it's not better because it follows a baseline grid

    p Please don't think that a baseline grid needs to be followed to be a great site. It doesn't. I just find that using a baseline grid makes it easy for me to figure out what the vertical spacing should be. And, I just enjoy setting type. You are free set type however you want. Much respect to each and every one of you. (ノ°ο°)ノ wootWOOT !!!

    hgroup
      h2(class="main__heading") Citations from Robert Bringhurst's
      h3(class="main__subhead") The Elements of Typographic Style

    h3(class="main__subbold") Break rules
    ul
      li By all means break the rules, and break them beautifully, delibrately and well. (p 10)
      li Surely typographers, like others, ought to be at liberty to follow or to blaze the trails they choose.

    h3(class="main__subbold") A Typographer's task
    ul
      li The typogarpher's one essential task is to interpret and communicate the text. (p 20)
      li Typography exists to honor text. (p 17)
      li One of the principles of durable typography is always legibility. (p 17)
      li Shape the page and frame the textblock so that it honors and reveals every element, every relationship between elements, and every logical nuance of the text. (p 23)

    h3(class="main__subbold") Choose a face
    ul
      li Well-chosen words deserve well-chosen letters; these in their turn deserve to be set with affection, intelligence, knowledge and skill. (p 18)
      li Choose a typeface or a group of faces that will honor and elucidate the character of the text. (p 22)
      li Allow the face to speak in its natural idiom.
      li Choose faces whose individual  spirit and character is in keeping with the text. (p 99)


    h3(class="main__subbold") Measure
      ul
        li Anything from 45 to 75 characters is widely regarded as a satisfactory length of line for a single-column page set in a serifed typeface in a text size. The 66-character line (counting both letters and spaces) is widely regarded as ideal. (p 26)
        li Longer measures need more lead than short ones. (p 37)
        li Whether oral or visual, longwindedness is very rarely a virtue.
    

  script(src="../internal.js")